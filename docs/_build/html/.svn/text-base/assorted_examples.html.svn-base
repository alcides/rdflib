<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Assorted examples &mdash; rdflib v2.5.0 documentation</title>
    <link rel="stylesheet" href="_static/default.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '',
        VERSION:     '2.5.0',
        COLLAPSE_MODINDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="top" title="rdflib v2.5.0 documentation" href="index.html" />
    <link rel="next" title="Additions" href="addons.html" />
    <link rel="prev" title="Graphs, Named Graphs and Blank Nodes" href="graphs_bnodes.html" /> 
  </head>
  <body>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="modindex.html" title="Global Module Index"
             accesskey="M">modules</a> |</li>
        <li class="right" >
          <a href="addons.html" title="Additions"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="graphs_bnodes.html" title="Graphs, Named Graphs and Blank Nodes"
             accesskey="P">previous</a> |</li>
        <li><a href="index.html">rdflib v2.5.0 documentation</a> &raquo;</li> 
      </ul>
    </div>  
    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="id1">
<span id="assorted-examples"></span><h1>Assorted examples<a class="headerlink" href="#id1" title="Permalink to this headline">¶</a></h1>
<div class="section" id="conjunctive-graphs">
<h2>Conjunctive Graphs<a class="headerlink" href="#conjunctive-graphs" title="Permalink to this headline">¶</a></h2>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">rdflib</span> <span class="kn">import</span> <span class="n">Namespace</span><span class="p">,</span> <span class="n">BNode</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">URIRef</span>
<span class="kn">from</span> <span class="nn">rdflib.Graph</span> <span class="kn">import</span> <span class="n">Graph</span><span class="p">,</span> <span class="n">ConjunctiveGraph</span>
<span class="kn">from</span> <span class="nn">rdflib.store.IOMemory</span> <span class="kn">import</span> <span class="n">IOMemory</span>

<span class="n">ns</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://love.com#&quot;</span><span class="p">)</span>

<span class="n">mary</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&quot;http://love.com/lovers/mary#&quot;</span><span class="p">)</span>
<span class="n">john</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&quot;http://love.com/lovers/john#&quot;</span><span class="p">)</span>

<span class="n">cmary</span><span class="o">=</span><span class="n">URIRef</span><span class="p">(</span><span class="s">&quot;http://love.com/lovers/mary#&quot;</span><span class="p">)</span>
<span class="n">cjohn</span><span class="o">=</span><span class="n">URIRef</span><span class="p">(</span><span class="s">&quot;http://love.com/lovers/john#&quot;</span><span class="p">)</span>

<span class="n">store</span> <span class="o">=</span> <span class="n">IOMemory</span><span class="p">()</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">ConjunctiveGraph</span><span class="p">(</span><span class="n">store</span><span class="o">=</span><span class="n">store</span><span class="p">)</span>
<span class="n">g</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;love&quot;</span><span class="p">,</span><span class="n">ns</span><span class="p">)</span>

<span class="n">gmary</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">(</span><span class="n">store</span><span class="o">=</span><span class="n">store</span><span class="p">,</span> <span class="n">identifier</span><span class="o">=</span><span class="n">cmary</span><span class="p">)</span>

<span class="n">gmary</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">mary</span><span class="p">,</span> <span class="n">ns</span><span class="p">[</span><span class="s">&#39;hasName&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="s">&quot;Mary&quot;</span><span class="p">)))</span>
<span class="n">gmary</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">mary</span><span class="p">,</span> <span class="n">ns</span><span class="p">[</span><span class="s">&#39;loves&#39;</span><span class="p">],</span> <span class="n">john</span><span class="p">))</span>

<span class="n">gjohn</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">(</span><span class="n">store</span><span class="o">=</span><span class="n">store</span><span class="p">,</span> <span class="n">identifier</span><span class="o">=</span><span class="n">cjohn</span><span class="p">)</span>
<span class="n">gjohn</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">john</span><span class="p">,</span> <span class="n">ns</span><span class="p">[</span><span class="s">&#39;hasName&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)))</span>

<span class="c">#enumerate contexts</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">g</span><span class="o">.</span><span class="n">contexts</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&quot;-- </span><span class="si">%s</span><span class="s"> &quot;</span> <span class="o">%</span> <span class="n">c</span>

<span class="c">#separate graphs</span>
<span class="k">print</span> <span class="n">gjohn</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">format</span><span class="o">=</span><span class="s">&#39;n3&#39;</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&quot;===================&quot;</span>
<span class="k">print</span> <span class="n">gmary</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">format</span><span class="o">=</span><span class="s">&#39;n3&#39;</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&quot;===================&quot;</span>

<span class="c">#full graph</span>
<span class="k">print</span> <span class="n">g</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">format</span><span class="o">=</span><span class="s">&#39;n3&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="two-finger-exercises">
<h2>Two-finger exercises<a class="headerlink" href="#two-finger-exercises" title="Permalink to this headline">¶</a></h2>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">logging</span>

<span class="c"># Configure how we want rdflib logger to log messages</span>
<span class="n">_logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&quot;rdflib&quot;</span><span class="p">)</span>
<span class="n">_logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
<span class="n">_hdlr</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">StreamHandler</span><span class="p">()</span>
<span class="n">_hdlr</span><span class="o">.</span><span class="n">setFormatter</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">Formatter</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(name)s</span><span class="s"> </span><span class="si">%(levelname)s</span><span class="s">: </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">))</span>
<span class="n">_logger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">_hdlr</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">rdflib.Graph</span> <span class="kn">import</span> <span class="n">Graph</span>
<span class="kn">from</span> <span class="nn">rdflib</span> <span class="kn">import</span> <span class="n">URIRef</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">BNode</span><span class="p">,</span> <span class="n">Namespace</span>
<span class="kn">from</span> <span class="nn">rdflib</span> <span class="kn">import</span> <span class="n">RDF</span>

<span class="n">store</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">()</span>

<span class="c"># Bind a few prefix, namespace pairs.</span>
<span class="n">store</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;dc&quot;</span><span class="p">,</span> <span class="s">&quot;http://http://purl.org/dc/elements/1.1/&quot;</span><span class="p">)</span>
<span class="n">store</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;foaf&quot;</span><span class="p">,</span> <span class="s">&quot;http://xmlns.com/foaf/0.1/&quot;</span><span class="p">)</span>

<span class="c"># Create a namespace object for the Friend of a friend namespace.</span>
<span class="n">FOAF</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://xmlns.com/foaf/0.1/&quot;</span><span class="p">)</span>

<span class="c"># Create an identifier to use as the subject for Donna.</span>
<span class="n">donna</span> <span class="o">=</span> <span class="n">BNode</span><span class="p">()</span>

<span class="c"># Add triples using store&#39;s add method.</span>
<span class="n">store</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">donna</span><span class="p">,</span> <span class="n">RDF</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&quot;Person&quot;</span><span class="p">]))</span>
<span class="n">store</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">donna</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&quot;nick&quot;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="s">&quot;donna&quot;</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s">&quot;foo&quot;</span><span class="p">)))</span>
<span class="n">store</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">donna</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="s">&quot;Donna Fales&quot;</span><span class="p">)))</span>

<span class="c"># Iterate over triples in store and print them out.</span>
<span class="k">print</span> <span class="s">&quot;--- printing raw triples ---&quot;</span>
<span class="k">for</span> <span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">o</span> <span class="ow">in</span> <span class="n">store</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">o</span>

<span class="c"># For each foaf:Person in the store print out its mbox property.</span>
<span class="k">print</span> <span class="s">&quot;--- printing mboxes ---&quot;</span>
<span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">store</span><span class="o">.</span><span class="n">subjects</span><span class="p">(</span><span class="n">RDF</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&quot;Person&quot;</span><span class="p">]):</span>
    <span class="k">for</span> <span class="n">mbox</span> <span class="ow">in</span> <span class="n">store</span><span class="o">.</span><span class="n">objects</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&quot;mbox&quot;</span><span class="p">]):</span>
        <span class="k">print</span> <span class="n">mbox</span>

<span class="c"># Serialize the store as RDF/XML to the file foaf.rdf.</span>
<span class="n">store</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="s">&quot;foaf.rdf&quot;</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&quot;pretty-xml&quot;</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mf">3</span><span class="p">)</span>

<span class="c"># Let&#39;s show off the serializers</span>

<span class="k">print</span> <span class="s">&quot;RDF Serializations:&quot;</span>

<span class="c"># Serialize as XML</span>
<span class="k">print</span> <span class="s">&quot;--- start: rdf-xml ---&quot;</span>
<span class="k">print</span> <span class="n">store</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">format</span><span class="o">=</span><span class="s">&quot;pretty-xml&quot;</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&quot;--- end: rdf-xml ---</span><span class="se">\n</span><span class="s">&quot;</span>

<span class="c"># Serialize as NTriples</span>
<span class="k">print</span> <span class="s">&quot;--- start: ntriples ---&quot;</span>
<span class="k">print</span> <span class="n">store</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">format</span><span class="o">=</span><span class="s">&quot;nt&quot;</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&quot;--- end: ntriples ---</span><span class="se">\n</span><span class="s">&quot;</span>
</pre></div>
</div>
</div>
<div class="section" id="update-namespace">
<h2>Update namespace<a class="headerlink" href="#update-namespace" title="Permalink to this headline">¶</a></h2>
<div class="highlight-python"><div class="highlight"><pre><span class="c">#OLD = &quot;http://www.mindswap.org/2004/terrorOnt.owl#&quot;</span>
<span class="c">#OLD = &quot;http://wang-desktop/TerrorOrgInstances#&quot;</span>
<span class="n">OLD</span> <span class="o">=</span> <span class="s">&quot;http://localhost/&quot;</span>
<span class="n">NEW</span> <span class="o">=</span> <span class="s">&quot;http://profilesinterror.mindswap.org/&quot;</span>

<span class="n">redfoot</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;terror&quot;</span><span class="p">,</span> <span class="s">&quot;http://counterterror.mindswap.org/2005/terrorism.owl#&quot;</span><span class="p">)</span>
<span class="n">redfoot</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;terror_old&quot;</span><span class="p">,</span> <span class="s">&quot;http://www.mindswap.org/2004/terrorOnt.owl#&quot;</span><span class="p">)</span>
<span class="n">redfoot</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;tech&quot;</span><span class="p">,</span> <span class="s">&quot;http://www.mindswap.org/~glapizco/technical.owl#&quot;</span><span class="p">)</span>
<span class="n">redfoot</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;wang-desk&quot;</span><span class="p">,</span> <span class="s">&quot;http://wang-desktop/TerrorOrgInstances#&quot;</span><span class="p">)</span>
<span class="n">redfoot</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;foaf&quot;</span><span class="p">,</span> <span class="s">&#39;http://xmlns.com/foaf/0.1/&#39;</span><span class="p">)</span>
<span class="n">redfoot</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;dc&quot;</span><span class="p">,</span> <span class="s">&#39;http://purl.org/dc/elements/1.1/&#39;</span><span class="p">)</span>


<span class="n">REDFOOT</span> <span class="o">=</span> <span class="n">redfoot</span><span class="o">.</span><span class="n">namespace</span><span class="p">(</span><span class="s">&quot;http://redfoot.net/2005/redfoot#&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">cid</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">source</span> <span class="ow">in</span> <span class="n">redfoot</span><span class="o">.</span><span class="n">triples</span><span class="p">((</span><span class="bp">None</span><span class="p">,</span> <span class="n">REDFOOT</span><span class="o">.</span><span class="n">source</span><span class="p">,</span> <span class="bp">None</span><span class="p">)):</span>
    <span class="k">if</span> <span class="n">source</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;updating </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">source</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">context</span> <span class="o">=</span> <span class="n">redfoot</span><span class="o">.</span><span class="n">get_context</span><span class="p">(</span><span class="n">cid</span><span class="p">)</span>

            <span class="k">for</span> <span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">o</span> <span class="ow">in</span> <span class="n">context</span><span class="p">:</span>
                <span class="n">context</span><span class="o">.</span><span class="n">remove</span><span class="p">((</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">o</span><span class="p">))</span>
                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">URIRef</span><span class="p">)</span> <span class="ow">and</span> <span class="n">OLD</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
                    <span class="n">s</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">OLD</span><span class="p">,</span> <span class="n">NEW</span><span class="p">))</span>
                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">URIRef</span><span class="p">)</span> <span class="ow">and</span> <span class="n">OLD</span> <span class="ow">in</span> <span class="n">p</span><span class="p">:</span>
                    <span class="n">p</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">OLD</span><span class="p">,</span> <span class="n">NEW</span><span class="p">))</span>
                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">URIRef</span><span class="p">)</span> <span class="ow">and</span> <span class="n">OLD</span> <span class="ow">in</span> <span class="n">o</span><span class="p">:</span>
                    <span class="n">o</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="n">o</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">OLD</span><span class="p">,</span> <span class="n">NEW</span><span class="p">))</span>
                <span class="n">context</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">o</span><span class="p">))</span>

            <span class="n">context</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&quot;pretty-xml&quot;</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span> <span class="n">e</span>
</pre></div>
</div>
</div>
<div class="section" id="sparql-query">
<h2>SPARQL query<a class="headerlink" href="#sparql-query" title="Permalink to this headline">¶</a></h2>
<div class="highlight-python"><pre>from rdflib import Literal, ConjunctiveGraph, Namespace, BNode, URIRef

DC = Namespace(u"http://purl.org/dc/elements/1.1/";)
FOAF = Namespace(u"http://xmlns.com/foaf/0.1/";)

graph = ConjunctiveGraph()
s = BNode()
graph.add((s, FOAF['givenName'], Literal('Alice')))
b = BNode()
graph.add((b, FOAF['givenName'], Literal('Bob')))
graph.add((b, DC['date'], Literal("2005-04-04T04:04:04Z")))

print graph.query("""PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
  PREFIX dc:  &lt;http://purl.org/dc/elements/1.1/&gt;
  PREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;
  SELECT ?name
  WHERE { ?x foaf:givenName  ?name .
                  OPTIONAL { ?x dc:date ?date } .
                  FILTER ( bound(?date) ) }""").serialize('python')</pre>
</div>
</div>
<div class="section" id="data-reading-exercise">
<h2>Data reading exercise<a class="headerlink" href="#data-reading-exercise" title="Permalink to this headline">¶</a></h2>
<div class="highlight-python"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="c"># -*- coding: utf-8 -*-</span>

<span class="sd">&quot;&quot;&quot;Demo script to show the different ways to read information</span>
<span class="sd">from an RDF file using rdflib, as found at http://rdflib.net/.</span>

<span class="sd">The tree main methods are:</span>
<span class="sd">1. Simple lookup in a list of triplets (SimpleLookup),</span>
<span class="sd">2. SPARQL query, created with rdflib.sparql.* objects (CustomSparql),</span>
<span class="sd">3. SPARQL query, created with bison (BisonSparql).</span>

<span class="sd">The main function reads a file, xfn-example.rdf, and displays all resource</span>
<span class="sd">pairs with a symmetrical &quot;xfn:met&quot; relation (e.g. A met B and B met A)</span>
<span class="sd">Uses the rdfs:label of the resources to display the name.</span>

<span class="sd">This demo file has been tested with the following versions of RDFlib:</span>
<span class="sd">  rdflib 2.0.6 -- unsupported (since it has no &quot;Graph&quot; modules)</span>
<span class="sd">  rdflib 2.1.3 -- methods 1, and 2 work fine</span>
<span class="sd">  rdflib 2.1.4 -- methods 1, and 2 work fine</span>
<span class="sd">  rdflib 2.2.3 -- methods 1, and 2 work fine</span>
<span class="sd">  rdflib 2.3.0 -- methods 1, and 2 work fine</span>
<span class="sd">  rdflib 2.3.1 -- methods 1, and 2 work fine</span>
<span class="sd">  rdflib 2.3.2 -- methods 1, and 2 work fine</span>
<span class="sd">  rdflib 2.3.3 -- methods 1, 2, and 3 work fine</span>
<span class="sd">  rdflib 2.4.0 -- methods 1, 2, and 3 work fine (but function call for method 2 was changed)</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="n">__copyright__</span> <span class="o">=</span> <span class="s">&quot;rdflibdemo written by Freek Dijkstra, Universiteit van Amsterdam, april 2007, contributed to the public domain (feel free to attribute me, but it&#39;s not needed).&quot;</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">distutils.version</span>
<span class="c"># semi-standard modules</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">rdflib</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
    <span class="k">raise</span> <span class="ne">ImportError</span><span class="p">(</span><span class="s">&quot;Module rdflib is not available. It can be downloaded from http://rdflib.net/</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
<span class="k">if</span> <span class="n">distutils</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">StrictVersion</span><span class="p">(</span><span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span> <span class="o">&lt;</span> <span class="s">&quot;2.0.9&quot;</span><span class="p">:</span>
    <span class="k">raise</span> <span class="ne">ImportError</span><span class="p">(</span><span class="s">&quot;The installed version of rdflib, </span><span class="si">%s</span><span class="s">, is too old. 2.1 or higher is required&quot;</span> <span class="o">%</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">rdflib.Graph</span> <span class="kn">import</span> <span class="n">Graph</span>
<span class="kn">from</span> <span class="nn">rdflib.sparql.sparqlGraph</span>  <span class="kn">import</span> <span class="n">SPARQLGraph</span>
<span class="kn">from</span> <span class="nn">rdflib.sparql.graphPattern</span> <span class="kn">import</span> <span class="n">GraphPattern</span>
<span class="k">if</span> <span class="n">distutils</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">StrictVersion</span><span class="p">(</span><span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span> <span class="o">&gt;</span> <span class="s">&quot;2.3.2&quot;</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">rdflib.sparql.bison</span> <span class="kn">import</span> <span class="n">Parse</span>   <span class="c"># available in 2.3.3 and up</span>
<span class="k">if</span> <span class="n">distutils</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">StrictVersion</span><span class="p">(</span><span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span> <span class="o">&gt;</span> <span class="s">&quot;2.3.9&quot;</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">rdflib.sparql</span> <span class="kn">import</span> <span class="n">Query</span>         <span class="c"># available in 2.4.0 and up</span>




<span class="k">def</span> <span class="nf">SimpleLookup</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Extracts information form a rdflib Graph object</span>
<span class="sd">    using a simple list lookup. E.g.:</span>
<span class="sd">    result = list(graph.subject_objects(self.xfn[&quot;met&quot;])):</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">assert</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">Graph</span><span class="p">))</span>
    <span class="n">xfn</span>  <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://gmpg.org/xfn/1#&quot;</span><span class="p">)</span>
    <span class="n">rdf</span>  <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;</span><span class="p">)</span>
    <span class="n">rdfs</span> <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://www.w3.org/2000/01/rdf-schema#&quot;</span><span class="p">)</span>
    <span class="n">meetings</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c"># Get a list of (subject, object) tuples in the graph with the xfn:met predicate</span>
    <span class="n">relations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">subject_objects</span><span class="p">(</span><span class="n">xfn</span><span class="p">[</span><span class="s">&quot;met&quot;</span><span class="p">]))</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span> <span class="ow">in</span> <span class="n">relations</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">peer</span><span class="p">,</span> <span class="n">person</span><span class="p">)</span> <span class="ow">in</span> <span class="n">relations</span><span class="p">:</span>
            <span class="c"># person says he/she has met peer, but peer doesn&#39;t say he/she has met person. Skip.</span>
            <span class="k">continue</span>
        <span class="c"># since we&#39;re processing (person, peer), we can skip (peer, person) later</span>
        <span class="n">relations</span><span class="o">.</span><span class="n">remove</span><span class="p">((</span><span class="n">peer</span><span class="p">,</span> <span class="n">person</span><span class="p">))</span>
        <span class="n">personname</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">objects</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">rdfs</span><span class="p">[</span><span class="s">&quot;label&quot;</span><span class="p">]))</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">personname</span><span class="p">)</span> <span class="o">==</span> <span class="mf">0</span><span class="p">:</span>
            <span class="k">continue</span>    <span class="c"># skip persons with no name</span>
        <span class="n">peername</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">objects</span><span class="p">(</span><span class="n">peer</span><span class="p">,</span> <span class="n">rdfs</span><span class="p">[</span><span class="s">&quot;label&quot;</span><span class="p">]))</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">peername</span><span class="p">)</span> <span class="o">==</span> <span class="mf">0</span><span class="p">:</span>
            <span class="k">continue</span>    <span class="c"># skip peers with no name</span>
        <span class="n">personname</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">objects</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">rdfs</span><span class="p">[</span><span class="s">&quot;label&quot;</span><span class="p">]))</span>
        <span class="c"># Add the name of the person and peer to list of people who&#39;ve met.</span>
        <span class="n">meetings</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">personname</span><span class="p">[</span><span class="mf">0</span><span class="p">],</span> <span class="n">peername</span><span class="p">[</span><span class="mf">0</span><span class="p">]))</span>

    <span class="c"># Print the results</span>
    <span class="k">print</span> <span class="s">&quot;Simple Lookup (</span><span class="si">%d</span><span class="s"> meetings found)&quot;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">meetings</span><span class="p">)</span>
    <span class="k">print</span> <span class="mf">40</span><span class="o">*</span><span class="s">&quot;-&quot;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span> <span class="ow">in</span> <span class="n">meetings</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> and </span><span class="si">%s</span><span class="s"> have met&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span>
    <span class="k">print</span>


<span class="k">def</span> <span class="nf">CustomSparql</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Extracts information form a rdflib Graph object</span>
<span class="sd">    using a SPARQL query, put together using GraphPattern objects. E.g.:</span>
<span class="sd">    select = (&quot;?ifA&quot;,&quot;?ifB&quot;)</span>
<span class="sd">    where = GraphPattern([(&quot;?ifA&quot;, xfn[&quot;met&quot;], &quot;?ifB&quot;)])</span>
<span class="sd">    result = graph.query(select,where)</span>
<span class="sd">    See http://dev.w3.org/cvsweb/~checkout~/2004/PythonLib-IH/Doc/sparqlDesc.html for more information.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">assert</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">Graph</span><span class="p">))</span>
    <span class="n">xfn</span>  <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://gmpg.org/xfn/1#&quot;</span><span class="p">)</span>
    <span class="n">rdf</span>  <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;</span><span class="p">)</span>
    <span class="n">rdfs</span> <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://www.w3.org/2000/01/rdf-schema#&quot;</span><span class="p">)</span>
    <span class="n">select</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;?personname&quot;</span><span class="p">,</span><span class="s">&quot;?peername&quot;</span><span class="p">)</span>
    <span class="n">where</span> <span class="o">=</span> <span class="n">GraphPattern</span><span class="p">([</span>
            <span class="p">(</span><span class="s">&quot;?person&quot;</span><span class="p">,</span> <span class="n">xfn</span><span class="p">[</span><span class="s">&quot;met&quot;</span><span class="p">],</span>    <span class="s">&quot;?peer&quot;</span><span class="p">),</span>
            <span class="p">(</span><span class="s">&quot;?peer&quot;</span><span class="p">,</span>   <span class="n">xfn</span><span class="p">[</span><span class="s">&quot;met&quot;</span><span class="p">],</span>    <span class="s">&quot;?person&quot;</span><span class="p">),</span>
            <span class="p">(</span><span class="s">&quot;?person&quot;</span><span class="p">,</span> <span class="n">rdfs</span><span class="p">[</span><span class="s">&quot;label&quot;</span><span class="p">],</span> <span class="s">&quot;?personname&quot;</span><span class="p">),</span>
            <span class="p">(</span><span class="s">&quot;?peer&quot;</span><span class="p">,</span>   <span class="n">rdfs</span><span class="p">[</span><span class="s">&quot;label&quot;</span><span class="p">],</span> <span class="s">&quot;?peername&quot;</span><span class="p">),</span>
            <span class="p">])</span>
    <span class="c"># Create a SPARQLGraph wrapper object out of the normal Graph</span>
    <span class="n">sparqlGrph</span> <span class="o">=</span> <span class="n">SPARQLGraph</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
    <span class="c"># Make the query</span>
    <span class="k">if</span> <span class="n">distutils</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">StrictVersion</span><span class="p">(</span><span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="s">&quot;2.3.9&quot;</span><span class="p">:</span>
        <span class="n">relations</span> <span class="o">=</span> <span class="n">sparqlGrph</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">select</span><span class="p">,</span> <span class="n">where</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c"># graph.query() function was changed in RDFlib 2.4.0</span>
        <span class="n">bindings</span> <span class="o">=</span> <span class="p">{</span> <span class="s">u&quot;xfn&quot;</span><span class="p">:</span> <span class="n">xfn</span><span class="p">,</span> <span class="s">u&quot;rdf&quot;</span><span class="p">:</span> <span class="n">rdf</span><span class="p">,</span> <span class="s">u&quot;rdfs&quot;</span><span class="p">:</span> <span class="n">rdfs</span> <span class="p">}</span>
        <span class="n">relations</span> <span class="o">=</span> <span class="n">Query</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">sparqlGrph</span><span class="p">,</span> <span class="n">select</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">initialBindings</span><span class="o">=</span><span class="n">bindings</span><span class="p">)</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span> <span class="ow">in</span> <span class="n">relations</span><span class="p">:</span>
        <span class="c"># since we&#39;re processing (person, peer), we can skip (peer, person) later</span>
        <span class="n">relations</span><span class="o">.</span><span class="n">remove</span><span class="p">((</span><span class="n">peer</span><span class="p">,</span> <span class="n">person</span><span class="p">))</span>

    <span class="c"># Print the results</span>
    <span class="k">print</span> <span class="s">&quot;Manual formatted SPARQL query (</span><span class="si">%d</span><span class="s"> meetings found)&quot;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">relations</span><span class="p">)</span>
    <span class="k">print</span> <span class="mf">40</span><span class="o">*</span><span class="s">&quot;-&quot;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span> <span class="ow">in</span> <span class="n">relations</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> and </span><span class="si">%s</span><span class="s"> have met&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span>
    <span class="k">print</span>


<span class="k">def</span> <span class="nf">BisonSparql</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Extracts information form a rdflib Graph object</span>
<span class="sd">    using a SPARQL query, parsed by the bison parser in RDFlib.</span>
<span class="sd">    graphpattern = Parse(&#39;SELECT ?ifA ?ifB WHERE { ?ifA xfn:met ?ifB . ?ifB xfn:met ?ifA }&#39;)</span>
<span class="sd">    result = graph.query(graphpattern, initNs=bindings)</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">assert</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">Graph</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">distutils</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">StrictVersion</span><span class="p">(</span><span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="s">&quot;2.3.2&quot;</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;Skipping Bison SPARQL query (requires RDFlib 2.3.3 or higher; version </span><span class="si">%s</span><span class="s"> detected)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>
        <span class="k">print</span>
        <span class="k">return</span>
    <span class="n">xfn</span>  <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://gmpg.org/xfn/1#&quot;</span><span class="p">)</span>
    <span class="n">rdf</span>  <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;</span><span class="p">)</span>
    <span class="n">rdfs</span> <span class="o">=</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://www.w3.org/2000/01/rdf-schema#&quot;</span><span class="p">)</span>
    <span class="n">bindings</span> <span class="o">=</span> <span class="p">{</span> <span class="s">u&quot;xfn&quot;</span><span class="p">:</span> <span class="n">xfn</span><span class="p">,</span> <span class="s">u&quot;rdf&quot;</span><span class="p">:</span> <span class="n">rdf</span><span class="p">,</span> <span class="s">u&quot;rdfs&quot;</span><span class="p">:</span> <span class="n">rdfs</span> <span class="p">}</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">Parse</span><span class="p">(</span><span class="s">&#39;SELECT ?personname ?peername WHERE </span><span class="se">\</span>
<span class="s">        { ?person xfn:met ?peer . ?peer xfn:met ?person . </span><span class="se">\</span>
<span class="s">        ?person rdfs:label ?personname . ?peer rdfs:label ?peername }&#39;</span><span class="p">)</span>
    <span class="c"># Make the query, and serialize the result as python objects (as opposed to for example XML)</span>
    <span class="n">relations</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">initNs</span><span class="o">=</span><span class="n">bindings</span><span class="p">)</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="s">&#39;python&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span> <span class="ow">in</span> <span class="n">relations</span><span class="p">:</span>
        <span class="c"># since we&#39;re processing (person, peer), we can skip (peer, person) later</span>
        <span class="n">relations</span><span class="o">.</span><span class="n">remove</span><span class="p">((</span><span class="n">peer</span><span class="p">,</span> <span class="n">person</span><span class="p">))</span>

    <span class="c"># Print the results</span>
    <span class="k">print</span> <span class="s">&quot;Bison SPARQL query (</span><span class="si">%d</span><span class="s"> meetings found)&quot;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">relations</span><span class="p">)</span>
    <span class="k">print</span> <span class="mf">40</span><span class="o">*</span><span class="s">&quot;-&quot;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span> <span class="ow">in</span> <span class="n">relations</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> and </span><span class="si">%s</span><span class="s"> have met&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">peer</span><span class="p">)</span>
    <span class="k">print</span>

<span class="k">def</span> <span class="nf">ReadFile</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s">&quot;xfn-example.rdf&quot;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Read a RDF and returns the objects in a rdflib Graph object&quot;&quot;&quot;</span>
    <span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&quot;Read RDF data from </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">filename</span>
    <span class="k">print</span>
    <span class="n">graph</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">graph</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;RDFlib version </span><span class="si">%s</span><span class="s"> detected&quot;</span> <span class="o">%</span> <span class="n">rdflib</span><span class="o">.</span><span class="n">__version__</span>
    <span class="k">print</span>
    <span class="n">graph</span> <span class="o">=</span> <span class="n">ReadFile</span><span class="p">()</span>
    <span class="n">SimpleLookup</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
    <span class="n">CustomSparql</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
    <span class="n">BisonSparql</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="example-foaf-smushing">
<h2>Example Foaf Smushing<a class="headerlink" href="#example-foaf-smushing" title="Permalink to this headline">¶</a></h2>
<p>Filter a graph by normalizing all foaf persons into URIs based on their mbox_sha1sum.</p>
<p>Suppose I got two FOAF documents each talking about the same person (according to mbox_sha1sum) but they each used a BNode for the subject. For this demo I&#8217;ve combined those two documents into one file:</p>
<div class="section" id="demo-n3">
<h3>demo.n3<a class="headerlink" href="#demo-n3" title="Permalink to this headline">¶</a></h3>
<div class="highlight-n3"><pre>@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

# from one document
:p0 a foaf:Person;
  foaf:mbox_sha1sum "65b983bb397fb71849da910996741752ace8369b";
  foaf:nick "mortenf";
  foaf:weblog  &lt;http://www.wasab.dk/morten/blog/archives/author/mortenf/&gt; .

# from another document
:p1 a foaf:Person;
    foaf:mbox_sha1sum "65b983bb397fb71849da910996741752ace8369b";
    foaf:nick "mortenf";
    foaf:homepage &lt;http://www.wasab.dk/morten/&gt;;
    foaf:interest &lt;http://en.wikipedia.org/wiki/Atom_(standard)&gt;,</pre>
</div>
<p>Now I&#8217;ll use rdflib to transform all the incoming FOAF data to new data that lies about the subjects. It might be easier to do some queries on this resulting graph, although you wouldn&#8217;t want to actually publish the result anywhere since it loses some information about FOAF people who really had a meaningful URI.</p>
</div>
<div class="section" id="fold-sha1-py">
<h3>fold_sha1.py<a class="headerlink" href="#fold-sha1-py" title="Permalink to this headline">¶</a></h3>
<div class="highlight-python"><div class="highlight"><pre><span class="sd">&quot;&quot;&quot;filter a graph by changing every subject with a foaf:mbox_sha1sum</span>
<span class="sd">into a new subject whose URI is based on the sha1sum. This new graph</span>
<span class="sd">might be easier to do some operations on.</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">from</span> <span class="nn">rdflib.Graph</span> <span class="kn">import</span> <span class="n">Graph</span>
<span class="kn">from</span> <span class="nn">rdflib</span> <span class="kn">import</span> <span class="n">Namespace</span>

<span class="n">FOAF</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://xmlns.com/foaf/0.1/&quot;</span><span class="p">)</span>
<span class="n">STABLE</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&quot;http://example.com/person/mbox_sha1sum/&quot;</span><span class="p">)</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">()</span>
<span class="n">g</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;demo.n3&quot;</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&quot;n3&quot;</span><span class="p">)</span>

<span class="n">newURI</span> <span class="o">=</span> <span class="p">{}</span> <span class="c"># old subject : stable uri</span>
<span class="k">for</span> <span class="n">s</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">o</span> <span class="ow">in</span> <span class="n">g</span><span class="o">.</span><span class="n">triples</span><span class="p">((</span><span class="bp">None</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&#39;mbox_sha1sum&#39;</span><span class="p">],</span> <span class="bp">None</span><span class="p">)):</span>
    <span class="n">newURI</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">STABLE</span><span class="p">[</span><span class="n">o</span><span class="p">]</span>


<span class="n">out</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">()</span>
<span class="n">out</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&#39;foaf&#39;</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">)</span>

<span class="k">for</span> <span class="n">s</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">o</span> <span class="ow">in</span> <span class="n">g</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">newURI</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
    <span class="n">o</span> <span class="o">=</span> <span class="n">newURI</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">o</span><span class="p">)</span> <span class="c"># might be linked to another person</span>
    <span class="n">out</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">s</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">o</span><span class="p">))</span>

<span class="k">print</span> <span class="n">out</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">format</span><span class="o">=</span><span class="s">&quot;n3&quot;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="output">
<h3>Output<a class="headerlink" href="#output" title="Permalink to this headline">¶</a></h3>
<p>note how all of the data has come together under one subject:</p>
<div class="highlight-n3"><div class="highlight"><pre><span class="k">@prefix </span><span class="nv">_5: </span><span class="nn">&lt;http://example.com/person/mbox_sha1sum/65&gt;.</span>
<span class="k">@prefix </span><span class="nv">foaf: </span><span class="nn">&lt;http://xmlns.com/foaf/0.1/&gt;.</span>
<span class="k">@prefix </span><span class="nv">rdf: </span><span class="nn">&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;.</span>

<span class="nn"> </span><span class="nc">_5:b983bb397fb71849da910996741752ace8369b </span><span class="o">a </span><span class="na">foaf:Person</span>;
     <span class="o">foaf:homepage </span><span class="na">&lt;http://www.wasab.dk/morten/&gt;</span>;
     <span class="o">foaf:interest </span><span class="na">&lt;http://en.wikipedia.org/wiki/Atom_(standard)&gt;</span>;
     <span class="o">foaf:mbox_sha1sum </span><span class="s">&quot;65b983bb397fb71849da910996741752ace8369b&quot;</span>;
     <span class="o">foaf:nick </span><span class="s">&quot;mortenf&quot;</span>;
     <span class="o">foaf:weblog </span><span class="na">&lt;http://www.wasab.dk/morten/blog/archives/author/mortenf/&gt;</span>.
</pre></div>
</div>
<p>An advantage of this approach over other methods for collapsing BNodes is that I can incrementally process new FOAF documents as they come in without having to access my ever-growing archive. Even if another &#8220;65b983bb397fb71849da910996741752ace8369b&#8221; document comes in next year, I would still give it the same stable subject URI that merges with my existing data.</p>
</div>
</div>
<div class="section" id="transitive-traversal">
<h2>Transitive traversal<a class="headerlink" href="#transitive-traversal" title="Permalink to this headline">¶</a></h2>
<p>How to use the <cite>transitive_objects</cite> and <cite>transitive_subjects</cite> graph methods</p>
<div class="section" id="formal-definition">
<h3>Formal definition<a class="headerlink" href="#formal-definition" title="Permalink to this headline">¶</a></h3>
<p>The <tt class="xref docutils literal"><span class="pre">transitive_objects()</span></tt> method finds all nodes such that there is a path from subject to one of those nodes using only the predicate property in the triples. The <tt class="xref docutils literal"><span class="pre">transitive_subjects()</span></tt> method is similar; it finds all nodes such that there is a path from the node to the object using only the predicate property.</p>
</div>
<div class="section" id="informal-description-with-an-example">
<h3>Informal description, with an example<a class="headerlink" href="#informal-description-with-an-example" title="Permalink to this headline">¶</a></h3>
<p>In brief, <tt class="xref docutils literal"><span class="pre">transitive_objects()</span></tt> walks forward in a graph using a particular property, and <tt class="xref docutils literal"><span class="pre">transitive_subjects()</span></tt> walks backward. A good example uses a property <tt class="docutils literal"><span class="pre">ex:parent</span></tt>, the semantics of which are biological parentage. The <tt class="xref docutils literal"><span class="pre">transitive_objects()</span></tt> method would get all the ancestors of a particular person (all nodes such that there is a parent path between the person and the object). The <tt class="xref docutils literal"><span class="pre">transitive_subjects()</span></tt> method would get all the descendants of a particular person (all nodes such that there is a parent path between the node and the person). So, say that your URI is <tt class="docutils literal"><span class="pre">ex:person</span></tt>.</p>
<p>The following code would get all of your (known) ancestors, and then get all the (known) descendants of your maternal grandmother:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">rdflib</span> <span class="kn">import</span> <span class="n">ConjunctiveGraph</span><span class="p">,</span> <span class="n">URIRef</span>

<span class="n">person</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:person&#39;</span><span class="p">)</span>
<span class="n">dad</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:d&#39;</span><span class="p">)</span>
<span class="n">mom</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:m&#39;</span><span class="p">)</span>
<span class="n">momOfDad</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:gm0&#39;</span><span class="p">)</span>
<span class="n">momOfMom</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:gm1&#39;</span><span class="p">)</span>
<span class="n">dadOfDad</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:gf0&#39;</span><span class="p">)</span>
<span class="n">dadOfMom</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:gf1&#39;</span><span class="p">)</span>

<span class="n">parent</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;ex:parent&#39;</span><span class="p">)</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">ConjunctiveGraph</span><span class="p">()</span>
<span class="n">g</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">person</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">dad</span><span class="p">))</span>
<span class="n">g</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">person</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">mom</span><span class="p">))</span>
<span class="n">g</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">dad</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">momOfDad</span><span class="p">))</span>
<span class="n">g</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">dad</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">dadOfDad</span><span class="p">))</span>
<span class="n">g</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">mom</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">momOfMom</span><span class="p">))</span>
<span class="n">g</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">mom</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">dadOfMom</span><span class="p">))</span>

<span class="k">print</span> <span class="s">&quot;Parents, forward from `ex:person`:&quot;</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">g</span><span class="o">.</span><span class="n">transitive_objects</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">parent</span><span class="p">):</span>
    <span class="k">print</span> <span class="n">i</span>

<span class="k">print</span> <span class="s">&quot;Parents, *backward* from `ex:gm1`:&quot;</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">g</span><span class="o">.</span><span class="n">transitive_subjects</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">momOfMom</span><span class="p">):</span>
    <span class="k">print</span> <span class="n">i</span>
</pre></div>
</div>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">The <tt class="xref docutils literal"><span class="pre">transitive_objects()</span></tt> method has the start node as the <em>first</em> argument, but the <tt class="xref docutils literal"><span class="pre">transitive_subjects()</span></tt> method has the start node as the <em>second</em> argument.</p>
</div>
</div>
</div>
<div class="section" id="film-py">
<h2>film.py<a class="headerlink" href="#film-py" title="Permalink to this headline">¶</a></h2>
<div class="highlight-python"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="sd">&quot;&quot;&quot; film.py: a simple tool to manage your movies review</span>
<span class="sd">Simon Rozet, http://atonie.org/</span>

<span class="sd">@@ :</span>
<span class="sd">- manage directors and writers</span>
<span class="sd">- manage actors</span>
<span class="sd">- handle non IMDB uri</span>
<span class="sd">- markdown support in comment</span>

<span class="sd">--</span>
<span class="sd">Usage:</span>
<span class="sd">    film.py whoami &quot;John Doe &lt;john@doe.org&gt;&quot;</span>
<span class="sd">        Initialize the store and set your name and email.</span>
<span class="sd">    film.py whoami</span>
<span class="sd">        Tell you who you are</span>
<span class="sd">    film.py http://www.imdb.com/title/tt0105236/</span>
<span class="sd">        Review the movie &quot;Reservoir Dogs&quot;</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">datetime</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">imdb</span>
<span class="kn">from</span> <span class="nn">rdflib</span> <span class="kn">import</span> <span class="n">BNode</span><span class="p">,</span> <span class="n">ConjunctiveGraph</span><span class="p">,</span> <span class="n">URIRef</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">Namespace</span><span class="p">,</span> <span class="n">RDF</span>

<span class="c">#storefn = os.path.expanduser(&#39;~/movies.n3&#39;)</span>
<span class="n">storefn</span> <span class="o">=</span> <span class="s">&#39;/home/simon/codes/film.dev/movies.n3&#39;</span>
<span class="n">storeuri</span> <span class="o">=</span> <span class="s">&#39;file://&#39;</span><span class="o">+</span><span class="n">storefn</span>
<span class="n">title</span> <span class="o">=</span> <span class="s">&#39;Movies viewed by </span><span class="si">%s</span><span class="s">&#39;</span>

<span class="n">r_who</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&#39;^(.*?) &lt;([a-z0-9_-]+(\.[a-z0-9_-]+)*@[a-z0-9_-]+(\.[a-z0-9_-]+)+)&gt;$&#39;</span><span class="p">)</span>

<span class="n">DC</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&#39;http://purl.org/dc/elements/1.1/&#39;</span><span class="p">)</span>
<span class="n">FOAF</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&#39;http://xmlns.com/foaf/0.1/&#39;</span><span class="p">)</span>
<span class="n">IMDB</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&#39;http://www.csd.abdn.ac.uk/~ggrimnes/dev/imdb/IMDB#&#39;</span><span class="p">)</span>
<span class="n">REV</span> <span class="o">=</span> <span class="n">Namespace</span><span class="p">(</span><span class="s">&#39;http://purl.org/stuff/rev#&#39;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Store</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span> <span class="o">=</span> <span class="n">ConjunctiveGraph</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">storefn</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">storeuri</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&#39;n3&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&#39;dc&#39;</span><span class="p">,</span> <span class="s">&#39;http://purl.org/dc/elements/1.1/&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&#39;foaf&#39;</span><span class="p">,</span> <span class="s">&#39;http://xmlns.com/foaf/0.1/&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&#39;imdb&#39;</span><span class="p">,</span> <span class="s">&#39;http://www.csd.abdn.ac.uk/~ggrimnes/dev/imdb/IMDB#&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&#39;rev&#39;</span><span class="p">,</span> <span class="s">&#39;http://purl.org/stuff/rev#&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">storeuri</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&#39;n3&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">who</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">who</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">who</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">name</span><span class="p">,</span> <span class="n">email</span> <span class="o">=</span> <span class="p">(</span><span class="n">r_who</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">who</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mf">1</span><span class="p">),</span> <span class="n">r_who</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">who</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mf">2</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">URIRef</span><span class="p">(</span><span class="n">storeuri</span><span class="p">),</span> <span class="n">DC</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="n">title</span> <span class="o">%</span> <span class="n">name</span><span class="p">)))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">URIRef</span><span class="p">(</span><span class="n">storeuri</span><span class="o">+</span><span class="s">&#39;#author&#39;</span><span class="p">),</span> <span class="n">RDF</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&#39;Person&#39;</span><span class="p">]))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">URIRef</span><span class="p">(</span><span class="n">storeuri</span><span class="o">+</span><span class="s">&#39;#author&#39;</span><span class="p">),</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="n">name</span><span class="p">)))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">URIRef</span><span class="p">(</span><span class="n">storeuri</span><span class="o">+</span><span class="s">&#39;#author&#39;</span><span class="p">),</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&#39;mbox&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="n">email</span><span class="p">)))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">objects</span><span class="p">(</span><span class="n">URIRef</span><span class="p">(</span><span class="n">storeuri</span><span class="o">+</span><span class="s">&#39;#author&#39;</span><span class="p">),</span> <span class="n">FOAF</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">new_movie</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">movie</span><span class="p">):</span>
        <span class="n">movieuri</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;http://www.imdb.com/title/tt</span><span class="si">%s</span><span class="s">/&#39;</span> <span class="o">%</span> <span class="n">movie</span><span class="o">.</span><span class="n">movieID</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">movieuri</span><span class="p">,</span> <span class="n">RDF</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="n">IMDB</span><span class="p">[</span><span class="s">&#39;Movie&#39;</span><span class="p">]))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">movieuri</span><span class="p">,</span> <span class="n">DC</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="n">movie</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">])))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">movieuri</span><span class="p">,</span> <span class="n">IMDB</span><span class="p">[</span><span class="s">&#39;year&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">movie</span><span class="p">[</span><span class="s">&#39;year&#39;</span><span class="p">]))))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">new_review</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">movie</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">rating</span><span class="p">,</span> <span class="n">comment</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">review</span> <span class="o">=</span> <span class="n">BNode</span><span class="p">()</span> <span class="c"># @@ humanize the identifier (something like #rev-$date)</span>
        <span class="n">movieuri</span> <span class="o">=</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;http://www.imdb.com/title/tt</span><span class="si">%s</span><span class="s">/&#39;</span> <span class="o">%</span> <span class="n">movie</span><span class="o">.</span><span class="n">movieID</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">movieuri</span><span class="p">,</span> <span class="n">REV</span><span class="p">[</span><span class="s">&#39;hasReview&#39;</span><span class="p">],</span> <span class="n">URIRef</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">#</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">storeuri</span><span class="p">,</span> <span class="n">review</span><span class="p">))))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">review</span><span class="p">,</span> <span class="n">RDF</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="n">REV</span><span class="p">[</span><span class="s">&#39;Review&#39;</span><span class="p">]))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">review</span><span class="p">,</span> <span class="n">DC</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="n">date</span><span class="p">)))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">review</span><span class="p">,</span> <span class="n">REV</span><span class="p">[</span><span class="s">&#39;maxRating&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="mf">5</span><span class="p">)))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">review</span><span class="p">,</span> <span class="n">REV</span><span class="p">[</span><span class="s">&#39;minRating&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="mf">0</span><span class="p">)))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">review</span><span class="p">,</span> <span class="n">REV</span><span class="p">[</span><span class="s">&#39;reviewer&#39;</span><span class="p">],</span> <span class="n">URIRef</span><span class="p">(</span><span class="n">storeuri</span><span class="o">+</span><span class="s">&#39;#author&#39;</span><span class="p">)))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">review</span><span class="p">,</span> <span class="n">REV</span><span class="p">[</span><span class="s">&#39;rating&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="n">rating</span><span class="p">)))</span>
        <span class="k">print</span> <span class="n">comment</span>
        <span class="k">if</span> <span class="n">comment</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">review</span><span class="p">,</span> <span class="n">REV</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">],</span> <span class="n">Literal</span><span class="p">(</span><span class="n">comment</span><span class="p">)))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">movie_is_in</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">uri</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">URIRef</span><span class="p">(</span><span class="n">uri</span><span class="p">),</span> <span class="n">RDF</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="n">IMDB</span><span class="p">[</span><span class="s">&#39;Movie&#39;</span><span class="p">])</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span>

<span class="k">def</span> <span class="nf">help</span><span class="p">():</span>
    <span class="k">print</span> <span class="n">__doc__</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;--&#39;</span><span class="p">)[</span><span class="mf">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">argv</span><span class="p">:</span>
        <span class="n">argv</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">Store</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;help&#39;</span><span class="p">,</span> <span class="s">&#39;--help&#39;</span><span class="p">,</span> <span class="s">&#39;h&#39;</span><span class="p">,</span> <span class="s">&#39;-h&#39;</span><span class="p">):</span>
        <span class="n">help</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;whoami&#39;</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">storefn</span><span class="p">):</span>
            <span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">who</span><span class="p">())[</span><span class="mf">0</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">s</span><span class="o">.</span><span class="n">who</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mf">2</span><span class="p">])</span>
    <span class="k">elif</span> <span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;http://www.imdb.com/title/tt&#39;</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">movie_is_in</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">]):</span>
            <span class="k">raise</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">imdb</span><span class="o">.</span><span class="n">IMDb</span><span class="p">()</span>
            <span class="n">movie</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">get_movie</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">][</span><span class="nb">len</span><span class="p">(</span><span class="s">&#39;http://www.imdb.com/title/tt&#39;</span><span class="p">):</span><span class="o">-</span><span class="mf">1</span><span class="p">])</span>
            <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s"> (</span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">movie</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">),</span> <span class="n">movie</span><span class="p">[</span><span class="s">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
            <span class="k">for</span> <span class="n">director</span> <span class="ow">in</span> <span class="n">movie</span><span class="p">[</span><span class="s">&#39;director&#39;</span><span class="p">]:</span>
                <span class="k">print</span> <span class="s">&#39;directed by: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">director</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">writer</span> <span class="ow">in</span> <span class="n">movie</span><span class="p">[</span><span class="s">&#39;writer&#39;</span><span class="p">]:</span>
                <span class="k">print</span> <span class="s">&#39;writed by: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">writer</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
            <span class="n">s</span><span class="o">.</span><span class="n">new_movie</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span>
            <span class="n">rating</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">while</span> <span class="ow">not</span> <span class="n">rating</span> <span class="ow">or</span> <span class="p">(</span><span class="n">rating</span> <span class="o">&gt;</span> <span class="mf">5</span> <span class="ow">or</span> <span class="n">rating</span> <span class="o">&lt;=</span> <span class="mf">0</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">rating</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;Rating (on five): &#39;</span><span class="p">))</span>
                <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
                    <span class="n">rating</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">date</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">while</span> <span class="ow">not</span> <span class="n">date</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;Review date (YYYY-MM-DD): &#39;</span><span class="p">)</span>
                    <span class="n">date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)[:</span><span class="mf">6</span><span class="p">])</span>
                <span class="k">except</span><span class="p">:</span>
                    <span class="n">date</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">comment</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;Comment: &#39;</span><span class="p">)</span>
            <span class="n">s</span><span class="o">.</span><span class="n">new_review</span><span class="p">(</span><span class="n">movie</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">rating</span><span class="p">,</span> <span class="n">comment</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">help</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
            <h3><a href="index.html">Table Of Contents</a></h3>
            <ul>
<li><a class="reference external" href="">Assorted examples</a><ul>
<li><a class="reference external" href="#conjunctive-graphs">Conjunctive Graphs</a></li>
<li><a class="reference external" href="#two-finger-exercises">Two-finger exercises</a></li>
<li><a class="reference external" href="#update-namespace">Update namespace</a></li>
<li><a class="reference external" href="#sparql-query">SPARQL query</a></li>
<li><a class="reference external" href="#data-reading-exercise">Data reading exercise</a></li>
<li><a class="reference external" href="#example-foaf-smushing">Example Foaf Smushing</a><ul>
<li><a class="reference external" href="#demo-n3">demo.n3</a></li>
<li><a class="reference external" href="#fold-sha1-py">fold_sha1.py</a></li>
<li><a class="reference external" href="#output">Output</a></li>
</ul>
</li>
<li><a class="reference external" href="#transitive-traversal">Transitive traversal</a><ul>
<li><a class="reference external" href="#formal-definition">Formal definition</a></li>
<li><a class="reference external" href="#informal-description-with-an-example">Informal description, with an example</a></li>
</ul>
</li>
<li><a class="reference external" href="#film-py">film.py</a></li>
</ul>
</li>
</ul>

            <h4>Previous topic</h4>
            <p class="topless"><a href="graphs_bnodes.html"
                                  title="previous chapter">Graphs, Named Graphs and Blank Nodes</a></p>
            <h4>Next topic</h4>
            <p class="topless"><a href="addons.html"
                                  title="next chapter">Additions</a></p>
            <h3>This Page</h3>
            <ul class="this-page-menu">
              <li><a href="_sources/assorted_examples.txt"
                     rel="nofollow">Show Source</a></li>
            </ul>
	  <div id="searchbox" style="display: none">
            <h3>Quick search</h3>
              <form class="search" action="search.html" method="get">
                <input type="text" name="q" size="18" />
                <input type="submit" value="Go" />
                <input type="hidden" name="check_keywords" value="yes" />
                <input type="hidden" name="area" value="default" />
              </form>
	      <p style="font-size: 90%">Enter search terms or a module, class or function name.</p>
          </div>
          <script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="modindex.html" title="Global Module Index"
             accesskey="M">modules</a> |</li>
        <li class="right" >
          <a href="addons.html" title="Additions"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="graphs_bnodes.html" title="Graphs, Named Graphs and Blank Nodes"
             accesskey="P">previous</a> |</li>
        <li><a href="index.html">rdflib v2.5.0 documentation</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer">
      &copy; Copyright 2009, Daniel Krech.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 0.6.
    </div>
  </body>
</html>